{"version":3,"file":"index.js","sources":["../../src/utils.ts","../../src/options-mapping.ts","../../src/sentry/telemetry.ts","../../src/debug-id-upload.ts","../../src/plugins/release-management.ts","../../src/plugins/telemetry.ts","../../src/sentry/logger.ts","../../src/index.ts"],"sourcesContent":["import findUp from \"find-up\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport os from \"os\";\nimport crypto from \"crypto\";\nimport childProcess from \"child_process\";\nimport MagicString, { SourceMap } from \"magic-string\";\n\n/**\n * Checks whether the given input is already an array, and if it isn't, wraps it in one.\n *\n * @param maybeArray Input to turn into an array, if necessary\n * @returns The input, if already an array, or an array with the input as the only element, if not\n */\nexport function arrayify<T = unknown>(maybeArray: T | T[]): T[] {\n  return Array.isArray(maybeArray) ? maybeArray : [maybeArray];\n}\n\ntype PackageJson = Record<string, unknown>;\n\n/**\n * Get the closes package.json from a given starting point upwards.\n * This handles a few edge cases:\n * * Check if a given file package.json appears to be an actual NPM package.json file\n * * Stop at the home dir, to avoid looking too deeply\n */\nexport function getPackageJson({ cwd, stopAt }: { cwd?: string; stopAt?: string } = {}):\n  | PackageJson\n  | undefined {\n  return lookupPackageJson(cwd ?? process.cwd(), path.normalize(stopAt ?? os.homedir()));\n}\n\nexport function parseMajorVersion(version: string): number | undefined {\n  // if it has a `v` prefix, remove it\n  if (version.startsWith(\"v\")) {\n    version = version.slice(1);\n  }\n\n  // First, try simple lookup of exact, ~ and ^ versions\n  const regex = /^[\\^~]?(\\d+)(\\.\\d+)?(\\.\\d+)?(-.+)?/;\n\n  const match = version.match(regex);\n  if (match) {\n    return parseInt(match[1] as string, 10);\n  }\n\n  // Try to parse e.g. 1.x\n  const coerced = parseInt(version, 10);\n  if (!Number.isNaN(coerced)) {\n    return coerced;\n  }\n\n  // Match <= and >= ranges.\n  const gteLteRegex = /^[<>]=\\s*(\\d+)(\\.\\d+)?(\\.\\d+)?(-.+)?/;\n  const gteLteMatch = version.match(gteLteRegex);\n  if (gteLteMatch) {\n    return parseInt(gteLteMatch[1] as string, 10);\n  }\n\n  // match < ranges\n  const ltRegex = /^<\\s*(\\d+)(\\.\\d+)?(\\.\\d+)?(-.+)?/;\n  const ltMatch = version.match(ltRegex);\n  if (ltMatch) {\n    // Two scenarios:\n    // a) < 2.0.0 --> return 1\n    // b) < 2.1.0 --> return 2\n\n    const major = parseInt(ltMatch[1] as string, 10);\n\n    if (\n      // minor version > 0\n      (typeof ltMatch[2] === \"string\" && parseInt(ltMatch[2].slice(1), 10) > 0) ||\n      // patch version > 0\n      (typeof ltMatch[3] === \"string\" && parseInt(ltMatch[3].slice(1), 10) > 0)\n    ) {\n      return major;\n    }\n\n    return major - 1;\n  }\n\n  // match > ranges\n  const gtRegex = /^>\\s*(\\d+)(\\.\\d+)?(\\.\\d+)?(-.+)?/;\n  const gtMatch = version.match(gtRegex);\n  if (gtMatch) {\n    // We always return the version here, even though it _may_ be incorrect\n    // E.g. if given > 2.0.0, it should be 2 if there exists any 2.x.x version, else 3\n    // Since there is no way for us to know this, we're going to assume any kind of patch/feature release probably exists\n    return parseInt(gtMatch[1] as string, 10);\n  }\n  return undefined;\n}\n\n// This is an explicit list of packages where we want to include the (major) version number.\nconst PACKAGES_TO_INCLUDE_VERSION = [\n  \"react\",\n  \"@angular/core\",\n  \"vue\",\n  \"ember-source\",\n  \"svelte\",\n  \"@sveltejs/kit\",\n  \"webpack\",\n  \"vite\",\n  \"gatsby\",\n  \"next\",\n  \"remix\",\n  \"rollup\",\n  \"esbuild\",\n];\n\nexport function getDependencies(packageJson: PackageJson): {\n  deps: string[];\n  depsVersions: Record<string, number>;\n} {\n  const dependencies: Record<string, string> = Object.assign(\n    {},\n    packageJson[\"devDependencies\"] ?? {},\n    packageJson[\"dependencies\"] ?? {}\n  );\n\n  const deps = Object.keys(dependencies).sort();\n\n  const depsVersions: Record<string, number> = deps.reduce((depsVersions, depName) => {\n    if (PACKAGES_TO_INCLUDE_VERSION.includes(depName)) {\n      const version = dependencies[depName] as string;\n      const majorVersion = parseMajorVersion(version);\n      if (majorVersion) {\n        depsVersions[depName] = majorVersion;\n      }\n    }\n    return depsVersions;\n  }, {} as Record<string, number>);\n\n  return { deps, depsVersions };\n}\n\nfunction lookupPackageJson(cwd: string, stopAt: string): PackageJson | undefined {\n  const jsonPath = findUp.sync(\n    (dirName) => {\n      // Stop if we reach this dir\n      if (path.normalize(dirName) === stopAt) {\n        return findUp.stop;\n      }\n\n      return findUp.sync.exists(dirName + \"/package.json\") ? \"package.json\" : undefined;\n    },\n    { cwd }\n  );\n\n  if (!jsonPath) {\n    return undefined;\n  }\n\n  try {\n    const jsonStr = fs.readFileSync(jsonPath, \"utf8\");\n    const json = JSON.parse(jsonStr) as PackageJson;\n\n    // Ensure it is an actual package.json\n    // This is very much not bulletproof, but should be good enough\n    if (\"name\" in json || \"private\" in json) {\n      return json;\n    }\n  } catch (error) {\n    // Ignore and walk up\n  }\n\n  // Continue up the tree, if we find a fitting package.json\n  const newCwd = path.dirname(path.resolve(jsonPath + \"/..\"));\n  return lookupPackageJson(newCwd, stopAt);\n}\n\n/**\n * Deterministically hashes a string and turns the hash into a uuid.\n */\nexport function stringToUUID(str: string): string {\n  const md5sum = crypto.createHash(\"md5\");\n  md5sum.update(str);\n  const md5Hash = md5sum.digest(\"hex\");\n\n  // Position 16 is fixed to either 8, 9, a, or b in the uuid v4 spec (10xx in binary)\n  // RFC 4122 section 4.4\n  const v4variant = [\"8\", \"9\", \"a\", \"b\"][md5Hash.substring(16, 17).charCodeAt(0) % 4] as string;\n\n  return (\n    md5Hash.substring(0, 8) +\n    \"-\" +\n    md5Hash.substring(8, 12) +\n    \"-4\" +\n    md5Hash.substring(13, 16) +\n    \"-\" +\n    v4variant +\n    md5Hash.substring(17, 20) +\n    \"-\" +\n    md5Hash.substring(20)\n  ).toLowerCase();\n}\n\nfunction gitRevision(): string | undefined {\n  let gitRevision: string | undefined;\n  try {\n    gitRevision = childProcess.execSync(\"git rev-parse HEAD\").toString().trim();\n  } catch (e) {\n    // noop\n  }\n  return gitRevision;\n}\n\n/**\n * Tries to guess a release name based on environmental data.\n */\nexport function determineReleaseName(): string | undefined {\n  return (\n    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env[\"GITHUB_SHA\"] ||\n    // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env[\"COMMIT_REF\"] ||\n    // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n    process.env[\"CF_PAGES_COMMIT_SHA\"] ||\n    // AWS CodeBuild - https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n    process.env[\"CODEBUILD_RESOLVED_SOURCE_VERSION\"] ||\n    // Bitbucket - https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/\n    process.env[\"BITBUCKET_COMMIT\"] ||\n    // CircleCI - https://circleci.com/docs/2.0/env-vars/\n    process.env[\"CIRCLE_SHA1\"] ||\n    // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env[\"VERCEL_GIT_COMMIT_SHA\"] ||\n    process.env[\"VERCEL_GITHUB_COMMIT_SHA\"] ||\n    process.env[\"VERCEL_GITLAB_COMMIT_SHA\"] ||\n    process.env[\"VERCEL_BITBUCKET_COMMIT_SHA\"] ||\n    // Zeit (now known as Vercel)\n    process.env[\"ZEIT_GITHUB_COMMIT_SHA\"] ||\n    process.env[\"ZEIT_GITLAB_COMMIT_SHA\"] ||\n    process.env[\"ZEIT_BITBUCKET_COMMIT_SHA\"] ||\n    // Flightcontrol - https://www.flightcontrol.dev/docs/guides/flightcontrol/environment-variables#built-in-environment-variables\n    process.env[\"FC_GIT_COMMIT_SHA\"] ||\n    gitRevision()\n  );\n}\n\n/**\n * Generates code for the global injector which is responsible for setting the global\n * `SENTRY_RELEASE` & `SENTRY_BUILD_INFO` variables.\n */\nexport function generateGlobalInjectorCode({\n  release,\n  injectBuildInformation,\n}: {\n  release: string;\n  injectBuildInformation: boolean;\n}) {\n  // The code below is mostly ternary operators because it saves bundle size.\n  // The checks are to support as many environments as possible. (Node.js, Browser, webworkers, etc.)\n  let code = `\n    var _global =\n      typeof window !== 'undefined' ?\n        window :\n        typeof global !== 'undefined' ?\n          global :\n          typeof self !== 'undefined' ?\n            self :\n            {};\n\n    _global.SENTRY_RELEASE={id:\"${release}\"};`;\n\n  if (injectBuildInformation) {\n    const buildInfo = getBuildInformation();\n\n    code += `\n      _global.SENTRY_BUILD_INFO=${JSON.stringify(buildInfo)};`;\n  }\n\n  return code;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function generateModuleMetadataInjectorCode(metadata: any) {\n  // The code below is mostly ternary operators because it saves bundle size.\n  // The checks are to support as many environments as possible. (Node.js, Browser, webworkers, etc.)\n  return `\n    var _global2 =\n      typeof window !== 'undefined' ?\n        window :\n        typeof global !== 'undefined' ?\n          global :\n          typeof self !== 'undefined' ?\n            self :\n            {};\n\n    _global2._sentryModuleMetadata = _global2._sentryModuleMetadata || {};\n    _global2._sentryModuleMetadata[new Error().stack] = ${JSON.stringify(metadata)};`;\n}\n\nfunction getBuildInformation() {\n  const packageJson = getPackageJson();\n\n  const { deps, depsVersions } = packageJson\n    ? getDependencies(packageJson)\n    : { deps: [], depsVersions: {} };\n\n  return {\n    deps,\n    depsVersions,\n    nodeVersion: parseMajorVersion(process.version),\n  };\n}\n\nexport function stripQueryAndHashFromPath(path: string): string {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return path.split(\"?\")[0]!.split(\"#\")[0]!;\n}\n\nexport function replaceBooleanFlagsInCode(\n  code: string,\n  replacementValues: Record<string, boolean | undefined>\n): { code: string; map: SourceMap } | null {\n  const ms = new MagicString(code);\n\n  Object.keys(replacementValues).forEach((key) => {\n    const value = replacementValues[key];\n\n    if (typeof value === \"boolean\") {\n      ms.replaceAll(key, JSON.stringify(value));\n    }\n  });\n\n  if (ms.hasChanged()) {\n    return {\n      code: ms.toString(),\n      map: ms.generateMap({ hires: true }),\n    };\n  }\n\n  return null;\n}\n","import { Logger } from \"./sentry/logger\";\nimport { Options as UserOptions } from \"./types\";\nimport { determineReleaseName } from \"./utils\";\n\nexport type NormalizedOptions = ReturnType<typeof normalizeUserOptions>;\n\nexport const SENTRY_SAAS_URL = \"https://sentry.io\";\n\nexport function normalizeUserOptions(userOptions: UserOptions) {\n  const options = {\n    org: userOptions.org ?? process.env[\"SENTRY_ORG\"],\n    project: userOptions.project ?? process.env[\"SENTRY_PROJECT\"],\n    authToken: userOptions.authToken ?? process.env[\"SENTRY_AUTH_TOKEN\"],\n    url: userOptions.url ?? process.env[\"SENTRY_URL\"] ?? SENTRY_SAAS_URL,\n    headers: userOptions.headers,\n    debug: userOptions.debug ?? false,\n    silent: userOptions.silent ?? false,\n    errorHandler: userOptions.errorHandler,\n    telemetry: userOptions.telemetry ?? true,\n    disable: userOptions.disable ?? false,\n    sourcemaps: userOptions.sourcemaps,\n    release: {\n      ...userOptions.release,\n      name: userOptions.release?.name ?? process.env[\"SENTRY_RELEASE\"] ?? determineReleaseName(),\n      inject: userOptions.release?.inject ?? true,\n      create: userOptions.release?.create ?? true,\n      finalize: userOptions.release?.finalize ?? true,\n      vcsRemote: userOptions.release?.vcsRemote ?? process.env[\"SENTRY_VSC_REMOTE\"] ?? \"origin\",\n      cleanArtifacts: userOptions.release?.cleanArtifacts ?? false,\n    },\n    bundleSizeOptimizations: userOptions.bundleSizeOptimizations,\n    _experiments: userOptions._experiments ?? {},\n  };\n\n  return options;\n}\n\n/**\n * Validates a few combinations of options that are not checked by Sentry CLI.\n *\n * For all other options, we can rely on Sentry CLI to validate them. In fact,\n * we can't validate them in the plugin because Sentry CLI might pick up options from\n * its config file.\n *\n * @param options the internal options\n * @param logger the logger\n *\n * @returns `true` if the options are valid, `false` otherwise\n */\nexport function validateOptions(options: NormalizedOptions, logger: Logger): boolean {\n  const setCommits = options.release?.setCommits;\n  if (setCommits) {\n    if (!setCommits.auto && !(setCommits.repo && setCommits.commit)) {\n      logger.error(\n        \"The `setCommits` option was specified but is missing required properties.\",\n        \"Please set either `auto` or both, `repo` and `commit`.\"\n      );\n      return false;\n    }\n    if (setCommits.auto && setCommits.repo && setCommits) {\n      logger.warn(\n        \"The `setCommits` options includes `auto` but also `repo` and `commit`.\",\n        \"Ignoring `repo` and `commit`.\",\n        \"Please only set either `auto` or both, `repo` and `commit`.\"\n      );\n    }\n  }\n\n  if (options.release?.deploy && !options.release?.deploy.env) {\n    logger.error(\n      \"The `deploy` option was specified but is missing the required `env` property.\",\n      \"Please set the `env` property.\"\n    );\n    return false;\n  }\n\n  return true;\n}\n","import SentryCli from \"@sentry/cli\";\nimport { defaultStackParser, Hub, makeNodeTransport, NodeClient } from \"@sentry/node\";\nimport { NormalizedOptions, SENTRY_SAAS_URL } from \"../options-mapping\";\n\nconst SENTRY_SAAS_HOSTNAME = \"sentry.io\";\n\nexport function createSentryInstance(\n  options: NormalizedOptions,\n  shouldSendTelemetry: Promise<boolean>,\n  bundler: string\n) {\n  const client = new NodeClient({\n    dsn: \"https://4c2bae7d9fbc413e8f7385f55c515d51@o1.ingest.sentry.io/6690737\",\n\n    tracesSampleRate: 1,\n    sampleRate: 1,\n\n    release: __PACKAGE_VERSION__,\n    integrations: [],\n    tracePropagationTargets: [\"sentry.io/api\"],\n\n    stackParser: defaultStackParser,\n\n    beforeSend: (event) => {\n      event.exception?.values?.forEach((exception) => {\n        delete exception.stacktrace;\n      });\n\n      delete event.server_name; // Server name might contain PII\n      return event;\n    },\n\n    beforeSendTransaction: (event) => {\n      delete event.server_name; // Server name might contain PII\n      return event;\n    },\n\n    // We create a transport that stalls sending events until we know that we're allowed to (i.e. when Sentry CLI told\n    // us that the upload URL is the Sentry SaaS URL)\n    transport: (nodeTransportOptions) => {\n      const nodeTransport = makeNodeTransport(nodeTransportOptions);\n      return {\n        flush: (timeout) => nodeTransport.flush(timeout),\n        send: async (request) => {\n          if (await shouldSendTelemetry) {\n            return nodeTransport.send(request);\n          } else {\n            return undefined;\n          }\n        },\n      };\n    },\n  });\n\n  const hub = new Hub(client);\n\n  setTelemetryDataOnHub(options, hub, bundler);\n\n  return { sentryHub: hub, sentryClient: client };\n}\n\nexport function setTelemetryDataOnHub(options: NormalizedOptions, hub: Hub, bundler: string) {\n  const { org, project, release, errorHandler, sourcemaps } = options;\n\n  hub.setTag(\"upload-legacy-sourcemaps\", !!release.uploadLegacySourcemaps);\n  if (release.uploadLegacySourcemaps) {\n    hub.setTag(\n      \"uploadLegacySourcemapsEntries\",\n      Array.isArray(release.uploadLegacySourcemaps) ? release.uploadLegacySourcemaps.length : 1\n    );\n  }\n\n  hub.setTag(\"module-metadata\", !!options._experiments.moduleMetadata);\n  hub.setTag(\"inject-build-information\", !!options._experiments.injectBuildInformation);\n\n  // Optional release pipeline steps\n  hub.setTag(\"clean-artifacts\", release.cleanArtifacts);\n  if (release.setCommits) {\n    hub.setTag(\"set-commits\", release.setCommits.auto === true ? \"auto\" : \"manual\");\n  } else {\n    hub.setTag(\"set-commits\", \"undefined\");\n  }\n  hub.setTag(\"finalize-release\", release.finalize);\n  hub.setTag(\"deploy-options\", !!release.deploy);\n\n  // Miscelaneous options\n  hub.setTag(\"custom-error-handler\", !!errorHandler);\n  hub.setTag(\"sourcemaps-assets\", !!sourcemaps?.assets);\n  hub.setTag(\n    \"delete-after-upload\",\n    !!sourcemaps?.deleteFilesAfterUpload || !!sourcemaps?.filesToDeleteAfterUpload\n  );\n\n  hub.setTag(\"node\", process.version);\n  hub.setTag(\"platform\", process.platform);\n\n  hub.setTags({\n    organization: org,\n    project,\n    bundler,\n  });\n\n  hub.setUser({ id: org });\n}\n\nexport async function allowedToSendTelemetry(options: NormalizedOptions): Promise<boolean> {\n  const { silent, org, project, authToken, url, headers, telemetry, release } = options;\n\n  // `options.telemetry` defaults to true\n  if (telemetry === false) {\n    return false;\n  }\n\n  if (url === SENTRY_SAAS_URL) {\n    return true;\n  }\n\n  const cli = new SentryCli(null, {\n    url,\n    authToken,\n    org,\n    project,\n    vcsRemote: release.vcsRemote,\n    silent,\n    headers,\n  });\n\n  let cliInfo;\n  try {\n    // Makes a call to SentryCLI to get the Sentry server URL the CLI uses.\n    // We need to check and decide to use telemetry based on the CLI's respone to this call\n    // because only at this time we checked a possibly existing .sentryclirc file. This file\n    // could point to another URL than the default URL.\n    cliInfo = await cli.execute([\"info\"], false);\n  } catch (e) {\n    return false;\n  }\n\n  const cliInfoUrl = cliInfo\n    .split(/(\\r\\n|\\n|\\r)/)[0]\n    ?.replace(/^Sentry Server: /, \"\")\n    ?.trim();\n\n  if (cliInfoUrl === undefined) {\n    return false;\n  }\n\n  return new URL(cliInfoUrl).hostname === SENTRY_SAAS_HOSTNAME;\n}\n\n/**\n * Flushing the SDK client can fail. We never want to crash the plugin because of telemetry.\n */\nexport async function safeFlushTelemetry(sentryClient: NodeClient) {\n  try {\n    await sentryClient.flush(2000);\n  } catch {\n    // Noop when flushing fails.\n    // We don't even need to log anything because there's likely nothing the user can do and they likely will not care.\n  }\n}\n","import fs from \"fs\";\nimport { glob } from \"glob\";\nimport os from \"os\";\nimport path from \"path\";\nimport * as util from \"util\";\nimport { Logger } from \"./sentry/logger\";\nimport { promisify } from \"util\";\nimport { Hub, NodeClient } from \"@sentry/node\";\nimport SentryCli from \"@sentry/cli\";\nimport { dynamicSamplingContextToSentryBaggageHeader } from \"@sentry/utils\";\nimport { safeFlushTelemetry } from \"./sentry/telemetry\";\n\ninterface RewriteSourcesHook {\n  (source: string, map: any): string;\n}\n\ninterface DebugIdUploadPluginOptions {\n  logger: Logger;\n  assets?: string | string[];\n  ignore?: string | string[];\n  releaseName?: string;\n  dist?: string;\n  rewriteSourcesHook?: RewriteSourcesHook;\n  handleRecoverableError: (error: unknown) => void;\n  sentryHub: Hub;\n  sentryClient: NodeClient;\n  filesToDeleteAfterUpload?: string | string[];\n  sentryCliOptions: {\n    url: string;\n    authToken: string;\n    org?: string;\n    project: string;\n    vcsRemote: string;\n    silent: boolean;\n    headers?: Record<string, string>;\n  };\n}\n\nexport function createDebugIdUploadFunction({\n  assets,\n  ignore,\n  logger,\n  releaseName,\n  dist,\n  handleRecoverableError,\n  sentryHub,\n  sentryClient,\n  sentryCliOptions,\n  rewriteSourcesHook,\n  filesToDeleteAfterUpload,\n}: DebugIdUploadPluginOptions) {\n  return async (buildArtifactPaths: string[]) => {\n    const artifactBundleUploadTransaction = sentryHub.startTransaction({\n      name: \"debug-id-sourcemap-upload\",\n    });\n\n    let folderToCleanUp: string | undefined;\n\n    try {\n      const mkdtempSpan = artifactBundleUploadTransaction.startChild({ description: \"mkdtemp\" });\n      const tmpUploadFolder = await fs.promises.mkdtemp(\n        path.join(os.tmpdir(), \"sentry-bundler-plugin-upload-\")\n      );\n      mkdtempSpan.finish();\n\n      folderToCleanUp = tmpUploadFolder;\n\n      let globAssets;\n      if (assets) {\n        globAssets = assets;\n      } else {\n        logger.debug(\n          \"No `sourcemaps.assets` option provided, falling back to uploading detected build artifacts.\"\n        );\n        globAssets = buildArtifactPaths;\n      }\n\n      const globSpan = artifactBundleUploadTransaction.startChild({ description: \"glob\" });\n      const globResult = await glob(globAssets, {\n        absolute: true,\n        nodir: true,\n        ignore: ignore,\n      });\n      globSpan.finish();\n\n      const debugIdChunkFilePaths = globResult.filter(\n        (debugIdChunkFilePath) =>\n          debugIdChunkFilePath.endsWith(\".js\") ||\n          debugIdChunkFilePath.endsWith(\".mjs\") ||\n          debugIdChunkFilePath.endsWith(\".cjs\")\n      );\n\n      // The order of the files output by glob() is not deterministic\n      // Ensure order within the files so that {debug-id}-{chunkIndex} coupling is consistent\n      debugIdChunkFilePaths.sort();\n\n      if (Array.isArray(assets) && assets.length === 0) {\n        logger.debug(\n          \"Empty `sourcemaps.assets` option provided. Will not upload sourcemaps with debug ID.\"\n        );\n      } else if (debugIdChunkFilePaths.length === 0) {\n        logger.warn(\n          \"Didn't find any matching sources for debug ID upload. Please check the `sourcemaps.assets` option.\"\n        );\n      } else {\n        const prepareSpan = artifactBundleUploadTransaction.startChild({\n          description: \"prepare-bundles\",\n        });\n\n        // Preparing the bundles can be a lot of work and doing it all at once has the potential of nuking the heap so\n        // instead we do it with a maximum of 16 concurrent workers\n        const preparationTasks = debugIdChunkFilePaths.map(\n          (chunkFilePath, chunkIndex) => async () => {\n            await prepareBundleForDebugIdUpload(\n              chunkFilePath,\n              tmpUploadFolder,\n              chunkIndex,\n              logger,\n              rewriteSourcesHook ?? defaultRewriteSourcesHook\n            );\n          }\n        );\n        const workers: Promise<void>[] = [];\n        const worker = async () => {\n          while (preparationTasks.length > 0) {\n            const task = preparationTasks.shift();\n            if (task) {\n              await task();\n            }\n          }\n        };\n        for (let workerIndex = 0; workerIndex < 16; workerIndex++) {\n          workers.push(worker());\n        }\n        await Promise.all(workers);\n\n        prepareSpan.finish();\n\n        const files = await fs.promises.readdir(tmpUploadFolder);\n        const stats = files.map((file) => fs.promises.stat(path.join(tmpUploadFolder, file)));\n        const uploadSize = (await Promise.all(stats)).reduce(\n          (accumulator, { size }) => accumulator + size,\n          0\n        );\n\n        artifactBundleUploadTransaction.setMeasurement(\"files\", files.length, \"none\");\n        artifactBundleUploadTransaction.setMeasurement(\"upload_size\", uploadSize, \"byte\");\n\n        const uploadSpan = artifactBundleUploadTransaction.startChild({\n          description: \"upload\",\n        });\n\n        const cliInstance = new SentryCli(null, {\n          ...sentryCliOptions,\n          headers: {\n            \"sentry-trace\": uploadSpan.toTraceparent(),\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            baggage: dynamicSamplingContextToSentryBaggageHeader(\n              artifactBundleUploadTransaction.getDynamicSamplingContext()\n            )!,\n            ...sentryCliOptions.headers,\n          },\n        });\n\n        await cliInstance.releases.uploadSourceMaps(\n          releaseName ?? \"undefined\", // unfortunetly this needs a value for now but it will not matter since debug IDs overpower releases anyhow\n          {\n            include: [\n              {\n                paths: [tmpUploadFolder],\n                rewrite: false,\n                dist: dist,\n              },\n            ],\n            useArtifactBundle: true,\n          }\n        );\n\n        uploadSpan.finish();\n        logger.info(\"Successfully uploaded source maps to Sentry\");\n      }\n\n      if (filesToDeleteAfterUpload) {\n        const deleteGlobSpan = artifactBundleUploadTransaction.startChild({\n          description: \"delete-glob\",\n        });\n        const filePathsToDelete = await glob(filesToDeleteAfterUpload, {\n          absolute: true,\n          nodir: true,\n        });\n        deleteGlobSpan.finish();\n\n        filePathsToDelete.forEach((filePathToDelete) => {\n          logger.debug(`Deleting asset after upload: ${filePathToDelete}`);\n        });\n\n        const deleteSpan = artifactBundleUploadTransaction.startChild({\n          description: \"delete-files-after-upload\",\n        });\n        await Promise.all(\n          filePathsToDelete.map((filePathToDelete) =>\n            fs.promises.rm(filePathToDelete, { force: true }).catch((e) => {\n              // This is allowed to fail - we just don't do anything\n              logger.debug(\n                `An error occured while attempting to delete asset: ${filePathToDelete}`,\n                e\n              );\n            })\n          )\n        );\n        deleteSpan.finish();\n      }\n    } catch (e) {\n      sentryHub.withScope((scope) => {\n        scope.setSpan(artifactBundleUploadTransaction);\n        sentryHub.captureException('Error in \"debugIdUploadPlugin\" writeBundle hook');\n      });\n      handleRecoverableError(e);\n    } finally {\n      if (folderToCleanUp) {\n        const cleanupSpan = artifactBundleUploadTransaction.startChild({\n          description: \"cleanup\",\n        });\n        void fs.promises.rm(folderToCleanUp, { recursive: true, force: true });\n        cleanupSpan.finish();\n      }\n      artifactBundleUploadTransaction.finish();\n      await safeFlushTelemetry(sentryClient);\n    }\n  };\n}\n\nexport async function prepareBundleForDebugIdUpload(\n  bundleFilePath: string,\n  uploadFolder: string,\n  chunkIndex: number,\n  logger: Logger,\n  rewriteSourcesHook: RewriteSourcesHook\n) {\n  let bundleContent;\n  try {\n    bundleContent = await promisify(fs.readFile)(bundleFilePath, \"utf8\");\n  } catch (e) {\n    logger.error(\n      `Could not read bundle to determine debug ID and source map: ${bundleFilePath}`,\n      e\n    );\n    return;\n  }\n\n  const debugId = determineDebugIdFromBundleSource(bundleContent);\n  if (debugId === undefined) {\n    logger.debug(\n      `Could not determine debug ID from bundle. This can happen if you did not clean your output folder before installing the Sentry plugin. File will not be source mapped: ${bundleFilePath}`\n    );\n    return;\n  }\n\n  const uniqueUploadName = `${debugId}-${chunkIndex}`;\n\n  bundleContent += `\\n//# debugId=${debugId}`;\n  const writeSourceFilePromise = fs.promises.writeFile(\n    path.join(uploadFolder, `${uniqueUploadName}.js`),\n    bundleContent,\n    \"utf-8\"\n  );\n\n  const writeSourceMapFilePromise = determineSourceMapPathFromBundle(\n    bundleFilePath,\n    bundleContent,\n    logger\n  ).then(async (sourceMapPath) => {\n    if (sourceMapPath) {\n      await prepareSourceMapForDebugIdUpload(\n        sourceMapPath,\n        path.join(uploadFolder, `${uniqueUploadName}.js.map`),\n        debugId,\n        rewriteSourcesHook,\n        logger\n      );\n    }\n  });\n\n  await writeSourceFilePromise;\n  await writeSourceMapFilePromise;\n}\n\n/**\n * Looks for a particular string pattern (`sdbid-[debug ID]`) in the bundle\n * source and extracts the bundle's debug ID from it.\n *\n * The string pattern is injected via the debug ID injection snipped.\n */\nfunction determineDebugIdFromBundleSource(code: string): string | undefined {\n  const match = code.match(\n    /sentry-dbid-([0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12})/\n  );\n\n  if (match) {\n    return match[1];\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Applies a set of heuristics to find the source map for a particular bundle.\n *\n * @returns the path to the bundle's source map or `undefined` if none could be found.\n */\nasync function determineSourceMapPathFromBundle(\n  bundlePath: string,\n  bundleSource: string,\n  logger: Logger\n): Promise<string | undefined> {\n  // 1. try to find source map at `sourceMappingURL` location\n  const sourceMappingUrlMatch = bundleSource.match(/^\\s*\\/\\/# sourceMappingURL=(.*)$/m);\n  if (sourceMappingUrlMatch) {\n    const sourceMappingUrl = path.normalize(sourceMappingUrlMatch[1] as string);\n\n    let isUrl;\n    let isSupportedUrl;\n    try {\n      const url = new URL(sourceMappingUrl);\n      isUrl = true;\n      isSupportedUrl = url.protocol === \"file:\";\n    } catch {\n      isUrl = false;\n      isSupportedUrl = false;\n    }\n\n    let absoluteSourceMapPath;\n    if (isSupportedUrl) {\n      absoluteSourceMapPath = sourceMappingUrl;\n    } else if (isUrl) {\n      // noop\n    } else if (path.isAbsolute(sourceMappingUrl)) {\n      absoluteSourceMapPath = sourceMappingUrl;\n    } else {\n      absoluteSourceMapPath = path.join(path.dirname(bundlePath), sourceMappingUrl);\n    }\n\n    if (absoluteSourceMapPath) {\n      try {\n        // Check if the file actually exists\n        await util.promisify(fs.access)(absoluteSourceMapPath);\n        return absoluteSourceMapPath;\n      } catch (e) {\n        // noop\n      }\n    }\n  }\n\n  // 2. try to find source map at path adjacent to chunk source, but with `.map` appended\n  try {\n    const adjacentSourceMapFilePath = bundlePath + \".map\";\n    await util.promisify(fs.access)(adjacentSourceMapFilePath);\n    return adjacentSourceMapFilePath;\n  } catch (e) {\n    // noop\n  }\n\n  // This is just a debug message because it can be quite spammy for some frameworks\n  logger.debug(\n    `Could not determine source map path for bundle: ${bundlePath} - Did you turn on source map generation in your bundler?`\n  );\n  return undefined;\n}\n\n/**\n * Reads a source map, injects debug ID fields, and writes the source map to the target path.\n */\nasync function prepareSourceMapForDebugIdUpload(\n  sourceMapPath: string,\n  targetPath: string,\n  debugId: string,\n  rewriteSourcesHook: RewriteSourcesHook,\n  logger: Logger\n): Promise<void> {\n  let sourceMapFileContent: string;\n  try {\n    sourceMapFileContent = await util.promisify(fs.readFile)(sourceMapPath, {\n      encoding: \"utf8\",\n    });\n  } catch (e) {\n    logger.error(`Failed to read source map for debug ID upload: ${sourceMapPath}`, e);\n    return;\n  }\n\n  let map: Record<string, unknown>;\n  try {\n    map = JSON.parse(sourceMapFileContent) as { sources: unknown; [key: string]: unknown };\n    // For now we write both fields until we know what will become the standard - if ever.\n    map[\"debug_id\"] = debugId;\n    map[\"debugId\"] = debugId;\n  } catch (e) {\n    logger.error(`Failed to parse source map for debug ID upload: ${sourceMapPath}`);\n    return;\n  }\n\n  if (map[\"sources\"] && Array.isArray(map[\"sources\"])) {\n    map[\"sources\"] = map[\"sources\"].map((source: string) => rewriteSourcesHook(source, map));\n  }\n\n  try {\n    await util.promisify(fs.writeFile)(targetPath, JSON.stringify(map), {\n      encoding: \"utf8\",\n    });\n  } catch (e) {\n    logger.error(`Failed to prepare source map for debug ID upload: ${sourceMapPath}`, e);\n    return;\n  }\n}\n\nconst PROTOCOL_REGEX = /^[a-zA-Z][a-zA-Z0-9+\\-.]*:\\/\\//;\nfunction defaultRewriteSourcesHook(source: string): string {\n  if (source.match(PROTOCOL_REGEX)) {\n    return source.replace(PROTOCOL_REGEX, \"\");\n  } else {\n    return path.relative(process.cwd(), path.normalize(source));\n  }\n}\n","import SentryCli, { SentryCliCommitsOptions, SentryCliNewDeployOptions } from \"@sentry/cli\";\nimport { Hub, NodeClient } from \"@sentry/node\";\nimport { UnpluginOptions } from \"unplugin\";\nimport { Logger } from \"../sentry/logger\";\nimport { safeFlushTelemetry } from \"../sentry/telemetry\";\nimport { IncludeEntry } from \"../types\";\nimport { arrayify } from \"../utils\";\n\ninterface ReleaseManagementPluginOptions {\n  logger: Logger;\n  releaseName: string;\n  shouldCreateRelease: boolean;\n  shouldCleanArtifacts: boolean;\n  shouldFinalizeRelease: boolean;\n  include?: string | IncludeEntry | Array<string | IncludeEntry>;\n  setCommitsOption?: SentryCliCommitsOptions;\n  deployOptions?: SentryCliNewDeployOptions;\n  dist?: string;\n  handleRecoverableError: (error: unknown) => void;\n  sentryHub: Hub;\n  sentryClient: NodeClient;\n  sentryCliOptions: {\n    url: string;\n    authToken: string;\n    org?: string;\n    project: string;\n    vcsRemote: string;\n    silent: boolean;\n    headers?: Record<string, string>;\n  };\n}\n\nexport function releaseManagementPlugin({\n  releaseName,\n  include,\n  dist,\n  setCommitsOption,\n  shouldCreateRelease,\n  shouldCleanArtifacts,\n  shouldFinalizeRelease,\n  deployOptions,\n  handleRecoverableError,\n  sentryHub,\n  sentryClient,\n  sentryCliOptions,\n}: ReleaseManagementPluginOptions): UnpluginOptions {\n  return {\n    name: \"sentry-debug-id-upload-plugin\",\n    async writeBundle() {\n      try {\n        const cliInstance = new SentryCli(null, sentryCliOptions);\n\n        if (shouldCreateRelease) {\n          await cliInstance.releases.new(releaseName);\n        }\n\n        if (shouldCleanArtifacts) {\n          await cliInstance.releases.execute(\n            [\"releases\", \"files\", releaseName, \"delete\", \"--all\"],\n            true\n          );\n        }\n\n        if (include) {\n          const normalizedInclude = arrayify(include)\n            .map((includeItem) =>\n              typeof includeItem === \"string\" ? { paths: [includeItem] } : includeItem\n            )\n            .map((includeEntry) => ({\n              ...includeEntry,\n              validate: includeEntry.validate ?? false,\n              ext: includeEntry.ext\n                ? includeEntry.ext.map((extension) => `.${extension.replace(/^\\./, \"\")}`)\n                : [\".js\", \".map\", \".jsbundle\", \".bundle\"],\n              ignore: includeEntry.ignore ? arrayify(includeEntry.ignore) : undefined,\n            }));\n\n          await cliInstance.releases.uploadSourceMaps(releaseName, {\n            include: normalizedInclude,\n            dist,\n          });\n        }\n\n        if (setCommitsOption) {\n          await cliInstance.releases.setCommits(releaseName, setCommitsOption);\n        }\n\n        if (shouldFinalizeRelease) {\n          await cliInstance.releases.finalize(releaseName);\n        }\n\n        if (deployOptions) {\n          await cliInstance.releases.newDeploy(releaseName, deployOptions);\n        }\n      } catch (e) {\n        sentryHub.captureException('Error in \"releaseManagementPlugin\" writeBundle hook');\n        await safeFlushTelemetry(sentryClient);\n        handleRecoverableError(e);\n      }\n    },\n  };\n}\n","import { Hub, NodeClient } from \"@sentry/node\";\nimport { UnpluginOptions } from \"unplugin\";\nimport { Logger } from \"../sentry/logger\";\nimport { safeFlushTelemetry } from \"../sentry/telemetry\";\n\ninterface TelemetryPluginOptions {\n  sentryHub: Hub;\n  sentryClient: NodeClient;\n  shouldSendTelemetry: Promise<boolean>;\n  logger: Logger;\n}\n\nexport function telemetryPlugin({\n  sentryHub,\n  sentryClient,\n  shouldSendTelemetry,\n  logger,\n}: TelemetryPluginOptions): UnpluginOptions {\n  return {\n    name: \"sentry-telemetry-plugin\",\n    async buildStart() {\n      if (await shouldSendTelemetry) {\n        logger.info(\n          \"Sending error and performance telemetry data to Sentry. To disable telemetry, set `options.telemetry` to `false`.\"\n        );\n        sentryHub.startTransaction({ name: \"Sentry Bundler Plugin execution\" }).finish();\n        await safeFlushTelemetry(sentryClient);\n      }\n    },\n  };\n}\n","interface LoggerOptions {\n  silent: boolean;\n  debug: boolean;\n  prefix: string;\n}\n\nexport type Logger = {\n  info(message: string, ...params: unknown[]): void;\n  warn(message: string, ...params: unknown[]): void;\n  error(message: string, ...params: unknown[]): void;\n  debug(message: string, ...params: unknown[]): void;\n};\n\nexport function createLogger(options: LoggerOptions): Logger {\n  return {\n    info(message: string, ...params: unknown[]) {\n      if (!options.silent) {\n        // eslint-disable-next-line no-console\n        console.log(`${options.prefix} Info: ${message}`, ...params);\n      }\n    },\n    warn(message: string, ...params: unknown[]) {\n      if (!options.silent) {\n        // eslint-disable-next-line no-console\n        console.log(`${options.prefix} Warning: ${message}`, ...params);\n      }\n    },\n    error(message: string, ...params: unknown[]) {\n      if (!options.silent) {\n        // eslint-disable-next-line no-console\n        console.log(`${options.prefix} Error: ${message}`, ...params);\n      }\n    },\n    debug(message: string, ...params: unknown[]) {\n      if (!options.silent && options.debug) {\n        // eslint-disable-next-line no-console\n        console.log(`${options.prefix} Debug: ${message}`, ...params);\n      }\n    },\n  };\n}\n","import SentryCli from \"@sentry/cli\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport MagicString from \"magic-string\";\nimport { createUnplugin, UnpluginOptions } from \"unplugin\";\nimport { normalizeUserOptions, validateOptions } from \"./options-mapping\";\nimport { createDebugIdUploadFunction } from \"./debug-id-upload\";\nimport { releaseManagementPlugin } from \"./plugins/release-management\";\nimport { telemetryPlugin } from \"./plugins/telemetry\";\nimport { createLogger } from \"./sentry/logger\";\nimport { allowedToSendTelemetry, createSentryInstance } from \"./sentry/telemetry\";\nimport { Options, SentrySDKBuildFlags } from \"./types\";\nimport {\n  generateGlobalInjectorCode,\n  generateModuleMetadataInjectorCode,\n  getDependencies,\n  getPackageJson,\n  parseMajorVersion,\n  replaceBooleanFlagsInCode,\n  stringToUUID,\n  stripQueryAndHashFromPath,\n} from \"./utils\";\nimport * as dotenv from \"dotenv\";\nimport { glob } from \"glob\";\n\ninterface SentryUnpluginFactoryOptions {\n  releaseInjectionPlugin: (injectionCode: string) => UnpluginOptions;\n  moduleMetadataInjectionPlugin?: (injectionCode: string) => UnpluginOptions;\n  debugIdInjectionPlugin: () => UnpluginOptions;\n  debugIdUploadPlugin: (upload: (buildArtifacts: string[]) => Promise<void>) => UnpluginOptions;\n  bundleSizeOptimizationsPlugin: (buildFlags: SentrySDKBuildFlags) => UnpluginOptions;\n}\n\n/**\n * The sentry bundler plugin concerns itself with two things:\n * - Release injection\n * - Sourcemaps upload\n *\n * Release injection:\n * Per default the sentry bundler plugin will inject a global `SENTRY_RELEASE` into each JavaScript/TypeScript module\n * that is part of the bundle. On a technical level this is done by appending an import (`import \"sentry-release-injector;\"`)\n * to all entrypoint files of the user code (see `transformInclude` and `transform` hooks). This import is then resolved\n * by the sentry plugin to a virtual module that sets the global variable (see `resolveId` and `load` hooks).\n * If a user wants to inject the release into a particular set of modules they can use the `releaseInjectionTargets` option.\n *\n * Source maps upload:\n *\n * The sentry bundler plugin will also take care of uploading source maps to Sentry. This\n * is all done in the `writeBundle` hook. In this hook the sentry plugin will execute the\n * release creation pipeline:\n *\n * 1. Create a new release\n * 2. Delete already uploaded artifacts for this release (if `cleanArtifacts` is enabled)\n * 3. Upload sourcemaps based on `include` and source-map-specific options\n * 4. Associate a range of commits with the release (if `setCommits` is specified)\n * 5. Finalize the release (unless `finalize` is disabled)\n * 6. Add deploy information to the release (if `deploy` is specified)\n *\n * This release creation pipeline relies on Sentry CLI to execute the different steps.\n */\nexport function sentryUnpluginFactory({\n  releaseInjectionPlugin,\n  moduleMetadataInjectionPlugin,\n  debugIdInjectionPlugin,\n  debugIdUploadPlugin,\n  bundleSizeOptimizationsPlugin,\n}: SentryUnpluginFactoryOptions) {\n  return createUnplugin<Options, true>((userOptions, unpluginMetaContext) => {\n    const logger = createLogger({\n      prefix: `[sentry-${unpluginMetaContext.framework}-plugin]`,\n      silent: userOptions.silent ?? false,\n      debug: userOptions.debug ?? false,\n    });\n\n    const dotenvResult = dotenv.config({\n      path: path.join(process.cwd(), \".env.sentry-build-plugin\"),\n    });\n\n    // Ignore \"file not found\" errors but throw all others\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Accessing `code` on error should be safe\n    if (dotenvResult.error && dotenvResult.error.code !== \"ENOENT\") {\n      throw dotenvResult.error;\n    } else if (dotenvResult.parsed) {\n      logger.info('Using environment variables configured in \".env.sentry-build-plugin\".');\n    }\n\n    const options = normalizeUserOptions(userOptions);\n\n    if (unpluginMetaContext.watchMode || options.disable) {\n      return [\n        {\n          name: \"sentry-noop-plugin\",\n        },\n      ];\n    }\n\n    const shouldSendTelemetry = allowedToSendTelemetry(options);\n    const { sentryHub, sentryClient } = createSentryInstance(\n      options,\n      shouldSendTelemetry,\n      unpluginMetaContext.framework\n    );\n    const sentrySession = sentryHub.startSession();\n    sentryHub.captureSession();\n\n    let sentEndSession = false; // Just to prevent infinite loops with beforeExit, which is called whenever the event loop empties out\n    // We also need to manually end sesisons on errors because beforeExit is not called on crashes\n    process.on(\"beforeExit\", () => {\n      if (!sentEndSession) {\n        sentryHub.endSession();\n        sentEndSession = true;\n      }\n    });\n\n    // Set the User-Agent that Sentry CLI will use when interacting with Sentry\n    process.env[\n      \"SENTRY_PIPELINE\"\n    ] = `${unpluginMetaContext.framework}-plugin/${__PACKAGE_VERSION__}`;\n\n    function handleRecoverableError(unknownError: unknown) {\n      sentrySession.status = \"abnormal\";\n      try {\n        if (options.errorHandler) {\n          try {\n            if (unknownError instanceof Error) {\n              options.errorHandler(unknownError);\n            } else {\n              options.errorHandler(new Error(\"An unknown error occured\"));\n            }\n          } catch (e) {\n            sentrySession.status = \"crashed\";\n            throw e;\n          }\n        } else {\n          sentrySession.status = \"crashed\";\n          throw unknownError;\n        }\n      } finally {\n        sentryHub.endSession();\n      }\n    }\n\n    if (!validateOptions(options, logger)) {\n      handleRecoverableError(\n        new Error(\"Options were not set correctly. See output above for more details.\")\n      );\n    }\n\n    if (process.cwd().match(/\\\\node_modules\\\\|\\/node_modules\\//)) {\n      logger.warn(\n        \"Running Sentry plugin from within a `node_modules` folder. Some features may not work.\"\n      );\n    }\n\n    const plugins: UnpluginOptions[] = [];\n\n    plugins.push(\n      telemetryPlugin({\n        sentryClient,\n        sentryHub,\n        logger,\n        shouldSendTelemetry,\n      })\n    );\n\n    if (options.bundleSizeOptimizations) {\n      const { bundleSizeOptimizations } = options;\n      const replacementValues: SentrySDKBuildFlags = {};\n\n      if (bundleSizeOptimizations.excludeDebugStatements) {\n        replacementValues[\"__SENTRY_DEBUG__\"] = false;\n      }\n      if (bundleSizeOptimizations.excludePerformanceMonitoring) {\n        replacementValues[\"__SENTRY_TRACE__\"] = false;\n      }\n      if (bundleSizeOptimizations.excludeReplayCanvas) {\n        replacementValues[\"__RRWEB_EXCLUDE_CANVAS__\"] = true;\n      }\n      if (bundleSizeOptimizations.excludeReplayIframe) {\n        replacementValues[\"__RRWEB_EXCLUDE_IFRAME__\"] = true;\n      }\n      if (bundleSizeOptimizations.excludeReplayShadowDom) {\n        replacementValues[\"__RRWEB_EXCLUDE_SHADOW_DOM__\"] = true;\n      }\n      if (bundleSizeOptimizations.excludeReplayWorker) {\n        replacementValues[\"__SENTRY_EXCLUDE_REPLAY_WORKER__\"] = true;\n      }\n\n      if (Object.keys(replacementValues).length > 0) {\n        plugins.push(bundleSizeOptimizationsPlugin(replacementValues));\n      }\n    }\n\n    if (!options.release.inject) {\n      logger.debug(\n        \"Release injection disabled via `release.inject` option. Will not inject release.\"\n      );\n    } else if (!options.release.name) {\n      logger.warn(\n        \"No release name provided. Will not inject release. Please set the `release.name` option to identify your release.\"\n      );\n    } else {\n      const injectionCode = generateGlobalInjectorCode({\n        release: options.release.name,\n        injectBuildInformation: options._experiments.injectBuildInformation || false,\n      });\n      plugins.push(releaseInjectionPlugin(injectionCode));\n    }\n\n    if (moduleMetadataInjectionPlugin && options._experiments.moduleMetadata) {\n      let metadata: object;\n      if (typeof options._experiments.moduleMetadata === \"function\") {\n        const args = {\n          org: options.org,\n          project: options.project,\n          release: options.release.name,\n        };\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\n        metadata = options._experiments.moduleMetadata(args);\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        metadata = options._experiments.moduleMetadata;\n      }\n\n      const injectionCode = generateModuleMetadataInjectorCode(metadata);\n      plugins.push(moduleMetadataInjectionPlugin(injectionCode));\n    } else if (options._experiments.moduleMetadata) {\n      logger.warn(\"'moduleMetadata' is currently only supported by '@sentry/webpack-plugin'\");\n    }\n\n    if (!options.release.name) {\n      logger.warn(\n        \"No release name provided. Will not create release. Please set the `release.name` option to identify your release.\"\n      );\n    } else if (!options.authToken) {\n      logger.warn(\n        \"No auth token provided. Will not create release. Please set the `authToken` option. You can find information on how to generate a Sentry auth token here: https://docs.sentry.io/api/auth/\"\n      );\n    } else if (!options.org && !options.authToken.startsWith(\"sntrys_\")) {\n      logger.warn(\n        \"No organization slug provided. Will not create release. Please set the `org` option to your Sentry organization slug.\"\n      );\n    } else if (!options.project) {\n      logger.warn(\n        \"No project provided. Will not create release. Please set the `project` option to your Sentry project slug.\"\n      );\n    } else {\n      plugins.push(\n        releaseManagementPlugin({\n          logger,\n          releaseName: options.release.name,\n          shouldCreateRelease: options.release.create,\n          shouldCleanArtifacts: options.release.cleanArtifacts,\n          shouldFinalizeRelease: options.release.finalize,\n          include: options.release.uploadLegacySourcemaps,\n          setCommitsOption: options.release.setCommits,\n          deployOptions: options.release.deploy,\n          dist: options.release.dist,\n          handleRecoverableError: handleRecoverableError,\n          sentryHub,\n          sentryClient,\n          sentryCliOptions: {\n            authToken: options.authToken,\n            org: options.org,\n            project: options.project,\n            silent: options.silent,\n            url: options.url,\n            vcsRemote: options.release.vcsRemote,\n            headers: options.headers,\n          },\n        })\n      );\n    }\n\n    plugins.push(debugIdInjectionPlugin());\n\n    if (!options.authToken) {\n      logger.warn(\n        \"No auth token provided. Will not upload source maps. Please set the `authToken` option. You can find information on how to generate a Sentry auth token here: https://docs.sentry.io/api/auth/\"\n      );\n    } else if (!options.org && !options.authToken.startsWith(\"sntrys_\")) {\n      logger.warn(\n        \"No org provided. Will not upload source maps. Please set the `org` option to your Sentry organization slug.\"\n      );\n    } else if (!options.project) {\n      logger.warn(\n        \"No project provided. Will not upload source maps. Please set the `project` option to your Sentry project slug.\"\n      );\n    } else {\n      plugins.push(\n        debugIdUploadPlugin(\n          createDebugIdUploadFunction({\n            assets: options.sourcemaps?.assets,\n            ignore: options.sourcemaps?.ignore,\n            filesToDeleteAfterUpload:\n              options.sourcemaps?.filesToDeleteAfterUpload ??\n              options.sourcemaps?.deleteFilesAfterUpload,\n            dist: options.release.dist,\n            releaseName: options.release.name,\n            logger: logger,\n            handleRecoverableError: handleRecoverableError,\n            rewriteSourcesHook: options.sourcemaps?.rewriteSources,\n            sentryHub,\n            sentryClient,\n            sentryCliOptions: {\n              authToken: options.authToken,\n              org: options.org,\n              project: options.project,\n              silent: options.silent,\n              url: options.url,\n              vcsRemote: options.release.vcsRemote,\n              headers: options.headers,\n            },\n          })\n        )\n      );\n    }\n\n    return plugins;\n  });\n}\n\nexport function getBuildInformation() {\n  const packageJson = getPackageJson();\n\n  const { deps, depsVersions } = packageJson\n    ? getDependencies(packageJson)\n    : { deps: [], depsVersions: {} };\n\n  return {\n    deps,\n    depsVersions,\n    nodeVersion: parseMajorVersion(process.version),\n  };\n}\n\n/**\n * Determines whether the Sentry CLI binary is in its expected location.\n * This function is useful since `@sentry/cli` installs the binary via a post-install\n * script and post-install scripts may not always run. E.g. with `npm i --ignore-scripts`.\n */\nexport function sentryCliBinaryExists(): boolean {\n  return fs.existsSync(SentryCli.getPath());\n}\n\nexport function createRollupReleaseInjectionHooks(injectionCode: string) {\n  const virtualReleaseInjectionFileId = \"\\0sentry-release-injection-file\";\n\n  return {\n    resolveId(id: string) {\n      if (id === virtualReleaseInjectionFileId) {\n        return {\n          id: virtualReleaseInjectionFileId,\n          external: false,\n          moduleSideEffects: true,\n        };\n      } else {\n        return null;\n      }\n    },\n\n    load(id: string) {\n      if (id === virtualReleaseInjectionFileId) {\n        return injectionCode;\n      } else {\n        return null;\n      }\n    },\n\n    transform(code: string, id: string) {\n      if (id === virtualReleaseInjectionFileId) {\n        return null;\n      }\n\n      // id may contain query and hash which will trip up our file extension logic below\n      const idWithoutQueryAndHash = stripQueryAndHashFromPath(id);\n\n      if (idWithoutQueryAndHash.match(/\\\\node_modules\\\\|\\/node_modules\\//)) {\n        return null;\n      }\n\n      if (\n        ![\".js\", \".ts\", \".jsx\", \".tsx\", \".mjs\"].some((ending) =>\n          idWithoutQueryAndHash.endsWith(ending)\n        )\n      ) {\n        return null;\n      }\n\n      const ms = new MagicString(code);\n\n      // Appending instead of prepending has less probability of mucking with user's source maps.\n      // Luckily import statements get hoisted to the top anyways.\n      ms.append(`\\n\\n;import \"${virtualReleaseInjectionFileId}\";`);\n\n      return {\n        code: ms.toString(),\n        map: ms.generateMap({ hires: true }),\n      };\n    },\n  };\n}\n\nexport function createRollupBundleSizeOptimizationHooks(replacementValues: SentrySDKBuildFlags) {\n  return {\n    transform(code: string) {\n      return replaceBooleanFlagsInCode(code, replacementValues);\n    },\n  };\n}\n\n// We need to be careful not to inject the snippet before any `\"use strict\";`s.\n// As an additional complication `\"use strict\";`s may come after any number of comments.\nconst COMMENT_USE_STRICT_REGEX =\n  // Note: CodeQL complains that this regex potentially has n^2 runtime. This likely won't affect realistic files.\n  /^(?:\\s*|\\/\\*(?:.|\\r|\\n)*?\\*\\/|\\/\\/.*[\\n\\r])*(?:\"[^\"]*\";|'[^']*';)?/;\n\nexport function createRollupDebugIdInjectionHooks() {\n  return {\n    renderChunk(code: string, chunk: { fileName: string }) {\n      if (\n        [\".js\", \".mjs\", \".cjs\"].some((ending) => chunk.fileName.endsWith(ending)) // chunks could be any file (html, md, ...)\n      ) {\n        const debugId = stringToUUID(code); // generate a deterministic debug ID\n        const codeToInject = getDebugIdSnippet(debugId);\n\n        const ms = new MagicString(code, { filename: chunk.fileName });\n\n        const match = code.match(COMMENT_USE_STRICT_REGEX)?.[0];\n\n        if (match) {\n          // Add injected code after any comments or \"use strict\" at the beginning of the bundle.\n          ms.appendLeft(match.length, codeToInject);\n        } else {\n          // ms.replace() doesn't work when there is an empty string match (which happens if\n          // there is neither, a comment, nor a \"use strict\" at the top of the chunk) so we\n          // need this special case here.\n          ms.prepend(codeToInject);\n        }\n\n        return {\n          code: ms.toString(),\n          map: ms.generateMap({ file: chunk.fileName, hires: true }),\n        };\n      } else {\n        return null; // returning null means not modifying the chunk at all\n      }\n    },\n  };\n}\n\nexport function createRollupModuleMetadataInjectionHooks(injectionCode: string) {\n  return {\n    renderChunk(code: string, chunk: { fileName: string }) {\n      if (\n        [\".js\", \".mjs\", \".cjs\"].some((ending) => chunk.fileName.endsWith(ending)) // chunks could be any file (html, md, ...)\n      ) {\n        const ms = new MagicString(code, { filename: chunk.fileName });\n\n        const match = code.match(COMMENT_USE_STRICT_REGEX)?.[0];\n\n        if (match) {\n          // Add injected code after any comments or \"use strict\" at the beginning of the bundle.\n          ms.appendLeft(match.length, injectionCode);\n        } else {\n          // ms.replace() doesn't work when there is an empty string match (which happens if\n          // there is neither, a comment, nor a \"use strict\" at the top of the chunk) so we\n          // need this special case here.\n          ms.prepend(injectionCode);\n        }\n\n        return {\n          code: ms.toString(),\n          map: ms.generateMap({ file: chunk.fileName, hires: true }),\n        };\n      } else {\n        return null; // returning null means not modifying the chunk at all\n      }\n    },\n  };\n}\n\nexport function createRollupDebugIdUploadHooks(\n  upload: (buildArtifacts: string[]) => Promise<void>\n) {\n  return {\n    async writeBundle(\n      outputOptions: { dir?: string; file?: string },\n      bundle: { [fileName: string]: unknown }\n    ) {\n      if (outputOptions.dir) {\n        const outputDir = outputOptions.dir;\n        const buildArtifacts = await glob(\n          [\"/**/*.js\", \"/**/*.js.map\", \"/**/*.mjs.map\", \"/**/*.cjs.map\"],\n          {\n            root: outputDir,\n            absolute: true,\n            nodir: true,\n          }\n        );\n        await upload(buildArtifacts);\n      } else if (outputOptions.file) {\n        await upload([outputOptions.file]);\n      } else {\n        const buildArtifacts = Object.keys(bundle).map((asset) => path.join(path.resolve(), asset));\n        await upload(buildArtifacts);\n      }\n    },\n  };\n}\n\nexport function getDebugIdSnippet(debugId: string): string {\n  return `;!function(){try{var e=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{},n=(new Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]=\"${debugId}\",e._sentryDebugIdIdentifier=\"sentry-dbid-${debugId}\")}catch(e){}}();`;\n}\n\nexport { stringToUUID, replaceBooleanFlagsInCode } from \"./utils\";\n\nexport type { Options, SentrySDKBuildFlags } from \"./types\";\n"],"names":["arrayify","maybeArray","Array","isArray","getPackageJson","_ref","arguments","length","undefined","cwd","stopAt","lookupPackageJson","process","path","normalize","os","homedir","parseMajorVersion","version","startsWith","slice","regex","match","parseInt","coerced","Number","isNaN","gteLteRegex","gteLteMatch","ltRegex","ltMatch","major","gtRegex","gtMatch","PACKAGES_TO_INCLUDE_VERSION","getDependencies","packageJson","_packageJson$devDepen","_packageJson$dependen","dependencies","Object","assign","deps","keys","sort","depsVersions","reduce","depName","includes","majorVersion","jsonPath","findUp","sync","dirName","stop","exists","jsonStr","fs","readFileSync","json","JSON","parse","error","newCwd","dirname","resolve","stringToUUID","str","md5sum","crypto","createHash","update","md5Hash","digest","v4variant","substring","charCodeAt","toLowerCase","gitRevision","childProcess","execSync","toString","trim","e","determineReleaseName","env","generateGlobalInjectorCode","_ref2","release","injectBuildInformation","code","concat","buildInfo","getBuildInformation","stringify","generateModuleMetadataInjectorCode","metadata","_ref3","nodeVersion","stripQueryAndHashFromPath","split","replaceBooleanFlagsInCode","replacementValues","ms","MagicString","forEach","key","value","replaceAll","hasChanged","map","generateMap","hires","SENTRY_SAAS_URL","normalizeUserOptions","userOptions","_userOptions$org","_userOptions$project","_userOptions$authToke","_userOptions$url","_userOptions$debug","_userOptions$silent","_userOptions$telemetr","_userOptions$disable","_userOptions$release$","_userOptions$release","_userOptions$release$2","_userOptions$release2","_userOptions$release$3","_userOptions$release3","_userOptions$release$4","_userOptions$release4","_userOptions$release$5","_userOptions$release5","_userOptions$release$6","_userOptions$release6","_userOptions$_experim","options","org","project","authToken","url","headers","debug","silent","errorHandler","telemetry","disable","sourcemaps","_objectSpread","name","inject","create","finalize","vcsRemote","cleanArtifacts","bundleSizeOptimizations","_experiments","validateOptions","logger","_options$release","_options$release2","_options$release3","setCommits","auto","repo","commit","warn","deploy","SENTRY_SAAS_HOSTNAME","createSentryInstance","shouldSendTelemetry","bundler","client","NodeClient","dsn","tracesSampleRate","sampleRate","integrations","tracePropagationTargets","stackParser","defaultStackParser","beforeSend","event","_event$exception","_event$exception$valu","exception","values","stacktrace","server_name","beforeSendTransaction","transport","nodeTransportOptions","nodeTransport","makeNodeTransport","flush","timeout","send","_send","_asyncToGenerator","_regeneratorRuntime","mark","_callee","request","wrap","_callee$","_context","prev","next","sent","abrupt","_x","apply","hub","Hub","setTelemetryDataOnHub","sentryHub","sentryClient","setTag","uploadLegacySourcemaps","moduleMetadata","assets","deleteFilesAfterUpload","filesToDeleteAfterUpload","platform","setTags","organization","setUser","id","allowedToSendTelemetry","_x2","_allowedToSendTelemetry","_callee2","_cliInfo$split$","_cliInfo$split$$repla","cli","cliInfo","cliInfoUrl","_callee2$","_context2","SentryCli","execute","t0","replace","URL","hostname","safeFlushTelemetry","_x3","_safeFlushTelemetry","_callee3","_callee3$","_context3","createDebugIdUploadFunction","ignore","releaseName","dist","handleRecoverableError","sentryCliOptions","rewriteSourcesHook","buildArtifactPaths","artifactBundleUploadTransaction","folderToCleanUp","mkdtempSpan","tmpUploadFolder","globAssets","globSpan","globResult","debugIdChunkFilePaths","prepareSpan","preparationTasks","workers","worker","workerIndex","files","stats","uploadSize","uploadSpan","cliInstance","deleteGlobSpan","filePathsToDelete","deleteSpan","cleanupSpan","startTransaction","startChild","description","promises","mkdtemp","join","tmpdir","finish","glob","absolute","nodir","filter","debugIdChunkFilePath","endsWith","chunkFilePath","chunkIndex","prepareBundleForDebugIdUpload","defaultRewriteSourcesHook","_ref4","task","shift","push","Promise","all","readdir","file","stat","accumulator","_ref5","size","setMeasurement","toTraceparent","baggage","dynamicSamplingContextToSentryBaggageHeader","getDynamicSamplingContext","releases","uploadSourceMaps","include","paths","rewrite","useArtifactBundle","info","filePathToDelete","rm","force","withScope","scope","setSpan","captureException","recursive","_x4","_x5","_x6","_prepareBundleForDebugIdUpload","_callee5","bundleFilePath","uploadFolder","bundleContent","debugId","uniqueUploadName","writeSourceFilePromise","writeSourceMapFilePromise","_callee5$","_context5","promisify","readFile","determineDebugIdFromBundleSource","writeFile","determineSourceMapPathFromBundle","then","_ref6","_callee4","sourceMapPath","_callee4$","_context4","prepareSourceMapForDebugIdUpload","_x15","_x7","_x8","_x9","_determineSourceMapPathFromBundle","_callee6","bundlePath","bundleSource","sourceMappingUrlMatch","sourceMappingUrl","isUrl","isSupportedUrl","absoluteSourceMapPath","adjacentSourceMapFilePath","_callee6$","_context6","protocol","_unused","isAbsolute","util","access","t1","_x10","_x11","_x12","_x13","_x14","_prepareSourceMapForDebugIdUpload","_callee7","targetPath","sourceMapFileContent","_callee7$","_context7","encoding","source","t2","PROTOCOL_REGEX","relative","releaseManagementPlugin","setCommitsOption","shouldCreateRelease","shouldCleanArtifacts","shouldFinalizeRelease","deployOptions","writeBundle","normalizedInclude","includeItem","includeEntry","_includeEntry$validat","validate","ext","extension","newDeploy","telemetryPlugin","buildStart","createLogger","message","_console","_len","params","_key","console","log","prefix","_console2","_len2","_key2","_console3","_len3","_key3","_console4","_len4","_key4","sentryUnpluginFactory","releaseInjectionPlugin","moduleMetadataInjectionPlugin","debugIdInjectionPlugin","debugIdUploadPlugin","bundleSizeOptimizationsPlugin","createUnplugin","unpluginMetaContext","framework","dotenvResult","dotenv","config","parsed","watchMode","_createSentryInstance","sentrySession","startSession","captureSession","sentEndSession","on","endSession","unknownError","status","Error","plugins","excludeDebugStatements","excludePerformanceMonitoring","excludeReplayCanvas","excludeReplayIframe","excludeReplayShadowDom","excludeReplayWorker","injectionCode","args","_options$sourcemaps","_options$sourcemaps2","_options$sourcemaps$f","_options$sourcemaps3","_options$sourcemaps4","_options$sourcemaps5","rewriteSources","sentryCliBinaryExists","existsSync","getPath","createRollupReleaseInjectionHooks","virtualReleaseInjectionFileId","resolveId","external","moduleSideEffects","load","transform","idWithoutQueryAndHash","some","ending","append","createRollupBundleSizeOptimizationHooks","COMMENT_USE_STRICT_REGEX","createRollupDebugIdInjectionHooks","renderChunk","chunk","fileName","_code$match","codeToInject","getDebugIdSnippet","filename","appendLeft","prepend","createRollupModuleMetadataInjectionHooks","_code$match2","createRollupDebugIdUploadHooks","upload","outputOptions","bundle","outputDir","_buildArtifacts","_buildArtifacts2","dir","root","buildArtifacts","asset"],"mappings":"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"}