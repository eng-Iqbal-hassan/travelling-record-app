{"version":3,"file":"index.mjs","sources":["../../src/index.ts"],"sourcesContent":["import {\n  sentryUnpluginFactory,\n  Options,\n  createRollupReleaseInjectionHooks,\n  createRollupModuleMetadataInjectionHooks,\n  createRollupDebugIdInjectionHooks,\n  createRollupDebugIdUploadHooks,\n  SentrySDKBuildFlags,\n  createRollupBundleSizeOptimizationHooks,\n} from \"@sentry/bundler-plugin-core\";\nimport { UnpluginOptions } from \"unplugin\";\n\nfunction viteReleaseInjectionPlugin(injectionCode: string): UnpluginOptions {\n  return {\n    name: \"sentry-vite-release-injection-plugin\",\n    enforce: \"pre\" as const, // need this so that vite runs the resolveId hook\n    vite: createRollupReleaseInjectionHooks(injectionCode),\n  };\n}\n\nfunction viteDebugIdInjectionPlugin(): UnpluginOptions {\n  return {\n    name: \"sentry-vite-debug-id-injection-plugin\",\n    vite: createRollupDebugIdInjectionHooks(),\n  };\n}\n\nfunction viteModuleMetadataInjectionPlugin(injectionCode: string): UnpluginOptions {\n  return {\n    name: \"sentry-vite-module-metadata-injection-plugin\",\n    vite: createRollupModuleMetadataInjectionHooks(injectionCode),\n  };\n}\n\nfunction viteDebugIdUploadPlugin(\n  upload: (buildArtifacts: string[]) => Promise<void>\n): UnpluginOptions {\n  return {\n    name: \"sentry-vite-debug-id-upload-plugin\",\n    vite: createRollupDebugIdUploadHooks(upload),\n  };\n}\n\nfunction viteBundleSizeOptimizationsPlugin(\n  replacementValues: SentrySDKBuildFlags\n): UnpluginOptions {\n  return {\n    name: \"sentry-vite-bundle-size-optimizations-plugin\",\n    vite: createRollupBundleSizeOptimizationHooks(replacementValues),\n  };\n}\n\nconst sentryUnplugin = sentryUnpluginFactory({\n  releaseInjectionPlugin: viteReleaseInjectionPlugin,\n  debugIdInjectionPlugin: viteDebugIdInjectionPlugin,\n  moduleMetadataInjectionPlugin: viteModuleMetadataInjectionPlugin,\n  debugIdUploadPlugin: viteDebugIdUploadPlugin,\n  bundleSizeOptimizationsPlugin: viteBundleSizeOptimizationsPlugin,\n});\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const sentryVitePlugin: (options: Options) => any = sentryUnplugin.vite;\n\nexport type { Options as SentryVitePluginOptions } from \"@sentry/bundler-plugin-core\";\nexport { sentryCliBinaryExists } from \"@sentry/bundler-plugin-core\";\n"],"names":["viteReleaseInjectionPlugin","injectionCode","name","enforce","vite","createRollupReleaseInjectionHooks","viteDebugIdInjectionPlugin","createRollupDebugIdInjectionHooks","viteModuleMetadataInjectionPlugin","createRollupModuleMetadataInjectionHooks","viteDebugIdUploadPlugin","upload","createRollupDebugIdUploadHooks","viteBundleSizeOptimizationsPlugin","replacementValues","createRollupBundleSizeOptimizationHooks","sentryUnplugin","sentryUnpluginFactory","releaseInjectionPlugin","debugIdInjectionPlugin","moduleMetadataInjectionPlugin","debugIdUploadPlugin","bundleSizeOptimizationsPlugin","sentryVitePlugin"],"mappings":";;;AAYA,SAASA,0BAA0BA,CAACC,aAAqB,EAAmB;EAC1E,OAAO;AACLC,IAAAA,IAAI,EAAE,sCAAsC;AAC5CC,IAAAA,OAAO,EAAE,KAAc;AAAE;IACzBC,IAAI,EAAEC,iCAAiC,CAACJ,aAAa,CAAA;GACtD,CAAA;AACH,CAAA;AAEA,SAASK,0BAA0BA,GAAoB;EACrD,OAAO;AACLJ,IAAAA,IAAI,EAAE,uCAAuC;IAC7CE,IAAI,EAAEG,iCAAiC,EAAC;GACzC,CAAA;AACH,CAAA;AAEA,SAASC,iCAAiCA,CAACP,aAAqB,EAAmB;EACjF,OAAO;AACLC,IAAAA,IAAI,EAAE,8CAA8C;IACpDE,IAAI,EAAEK,wCAAwC,CAACR,aAAa,CAAA;GAC7D,CAAA;AACH,CAAA;AAEA,SAASS,uBAAuBA,CAC9BC,MAAmD,EAClC;EACjB,OAAO;AACLT,IAAAA,IAAI,EAAE,oCAAoC;IAC1CE,IAAI,EAAEQ,8BAA8B,CAACD,MAAM,CAAA;GAC5C,CAAA;AACH,CAAA;AAEA,SAASE,iCAAiCA,CACxCC,iBAAsC,EACrB;EACjB,OAAO;AACLZ,IAAAA,IAAI,EAAE,8CAA8C;IACpDE,IAAI,EAAEW,uCAAuC,CAACD,iBAAiB,CAAA;GAChE,CAAA;AACH,CAAA;AAEA,IAAME,cAAc,GAAGC,qBAAqB,CAAC;AAC3CC,EAAAA,sBAAsB,EAAElB,0BAA0B;AAClDmB,EAAAA,sBAAsB,EAAEb,0BAA0B;AAClDc,EAAAA,6BAA6B,EAAEZ,iCAAiC;AAChEa,EAAAA,mBAAmB,EAAEX,uBAAuB;AAC5CY,EAAAA,6BAA6B,EAAET,iCAAAA;AACjC,CAAC,CAAC,CAAA;;AAEF;AACaU,IAAAA,gBAA2C,GAAGP,cAAc,CAACZ;;;;"}